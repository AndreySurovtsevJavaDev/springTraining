// Здесь ответы на общетеоретические вопросы по спрингу

public class Theory {

    // Что такое Spring
    // Это прикладной фреймворк - пакет типичных функций ПО, образующих базовую структуру для разработки приложения.
    //Позволяет не создавать весь код программы с 0
    // Фреймворк это некий каркас, который определяет структуру системы и облегчает ращработку компонентов системы и их интеграцию.

    // Зачем нужны фреймворки:
    // Пример: мы заказали мебельный шкаф, но приехал нам набор деталей, из которого можно собать вообще любую мебель, но мы
    //не обязаны использовать все детали и можем взять из набора только нужные нам.
    // Фреймвор предлагает все возможные компоненты ПО, которые могут понадобиться при создании любого приложения

    // Spring как надстройка
    //  Spring предоставляет высокоуровневые абстракции, такие как:
    //      Внедрение зависимостей (Dependency Injection).
    //      MVC-архитектура.
    //      Управление транзакциями.
    //      Безопасность (Spring Security).


    // Почему этот функционал вынесен в фреймворк, а не реализован в языке:
    //  Разделение ответственности: Ядро языка vs Фреймворки
    //a) Ядро языка
    //      Ядро Java отвечает за базовые концепции программирования, такие как:
    //      Объектно-ориентированная парадигма.
    //      Управление памятью (сборка мусора).
    //      Многопоточность.
    //      Базовые типы данных и коллекции.
    //  Эти элементы являются универсальными и применимыми практически во всех областях разработки.
    //b) Фреймворки
    //   Фреймворки, такие как Spring, предоставляют высокоуровневые инструменты для решения конкретных задач. Например:
    //      Spring Framework упрощает разработку веб-приложений.
    //      Hibernate помогает с управлением базами данных.
    //      Micronaut или Quarkus оптимизируют работу микросервисов.
    //Эти фреймворки могут быть разработаны, поддерживаться и развиваться независимо от ядра языка.

    // Вообще, спринг это целая экосистема фреймворков

    // Спринг является модульной конструкцией. И для того, чтобы использовать что-то из экосистемы спринга не обязательно
    // подрубать к приложению весь спринг целиком. Достаточно только нужных частей.

    // КАКИЕ ПРЕИМУЩЕСТВА ДАЁТ Spring (тезисно)
    // Слабая связность компонентов
    // Упрощенное тестирование
    // Управление жизненным циклом объектов:
    //      Spring управляет созданием и уничтожением бинов
    //      Поддерживает различные области видимости (singleton, prototype и др.)
    // Дополнительные возможности:
    //      Транзакционность через аннотации (@Transactional)
    //      Интеграция с другими системами
    // Безопасность через Spring Security
    // Упрощенная работа с базами данных через Spring Data
    // Снижает сложность конфигурирования приложений
    // Предоставляет готовые решения для распространенных задач
    // Обеспечивает согласованность архитектуры
    // Повышает переиспользуемость кода

}
// ------------------------------------------------------------------------------------------------------------------


// ЧТО ТАКОЕ КОНТЕКСТ СПРИНГа (Application Context)
// Это своего рода контейнер, который содержит и управляет компонентами приложения (beans)

// бинами называют экземпляры объектов помещаемых в контекст спринга.
// Область видимости (Scope) : Beans могут иметь разные области видимости, например:
//  - singleton (по умолчанию) — один экземпляр на весь контейнер;
//  - prototype — новый экземпляр каждый раз при запросе;
//  - request , session , application и другие (в основном для веб-приложений).

// Способы включения бинов в контекст:
//  - посредством аннотации @bean
// В остальные, пишут, что можно не погружаться, но перечислю:
//  - посредством стереотипных аннотаций (???)
//  - програмно (???)

// ------------------------------------------------------------------------------------------------------------------
// MAVEN
// это система сборки
// сборка проекта включает в себя:
//  - компиляцию: преобразование в байт-код.
//  - Связывание:  Соединение скомпилированных частей программы (например, объектных файлов) и внешних библиотек в единый исполняемый файл или пакет.
//  - тестирование: юнит-тесты
//  - проверку соответствия синтаксиса заданным правилам
//  - Проверку на наличие уязвимостей.
//  - загрузку зависимостей
//  - Оптимизацию: повышение эффективности использования памяти приложением
//  - Генерация документации: создание доки на основе комментариев
//  - Развёртывание: Подготовка собранного приложения к развертыванию на целевых серверах или устройствах

//  Maven, Gradle, Ant, Make, MSBuild) помогают автоматизировать этот процесс

// На почитать: introducting maven: a Build for today's Java developers by Balaji Varansi(2019)

// ------------------------------------------------------------------------------------------------------------------
// Структура папок в проекте maven
// main -
// src -
//

// ------------------------------------------------------------------------------------------------------------------
// Dependency injection
// Spring сам внедряет все необходимые зависимости в объекты. (связывает объекты между собой) мы только пописываем эту связь
